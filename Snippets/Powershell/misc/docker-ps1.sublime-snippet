<snippet>
  <content><![CDATA[
#  ======================================
#    Requirement : Host must be Linux.
#    This script makes it easy for us
#    to get into development using
#    best practices that Docker offers us.
#  ======================================

function build (\$image) {

  #  ======================================
  #    Create a docker image named : \$args[1]
  #    .. if it doesn't already exist.
  #  ======================================

  if (-not ("\$(docker images -q \${image})")) {
    docker build -t \${image} .
  }
}

function debug (\$image, \$container, \$ip, \$port) {


  #  ======================================
  #    Create a container named : \$args[2]
  #    if it doesn't already exist, and if
  #    it does delete it and make a new one.
  #  ======================================

  if ("\$(docker ps -a | select-string \$container)") {
    write-host "Removing container : \$container"
    docker rm -f \$container
  }

  write-host "Creating container : \$container"
  set-variable -name display -value "\${ip}:0.0"
  docker run -it -p "\${port}:4000" -v "\${PWD}:/app" -e DISPLAY=\$DISPLAY --name \$container \$image 
}

function clean (\$image, \$container) {

  #  ======================================
  #    Remove image : '\$args[1]'
  #    Remove container : '\$args[2]' 
  #    .. if they exist.
  #  ======================================

  if ("\$(docker images -q \$image)") {
    write-host "Removing image : \$image"
    docker rmi -f \$image 
  }  

  if ("\$(docker ps -a | select-string \$container)") {
    write-host "Removing container : \$container"
    docker rm -f \$container
  }
}

#  ======================================
#    Clean only if mentioned, otherwise
#    keep debugging.
#  ======================================

WRITE-HOST \$args[0]

if ( \$args[0] -eq "clean" ) {
  clean '$1' '${1/:/-/g}'
} else {
  build '$1'
  debug '$1' '${1/:/-/g}' '${3:100.64.0.2}' '${4:4000}'
}

\$host.enternestedprompt()

]]></content>
  <tabTrigger>docker</tabTrigger>
  <scope>source.powershell</scope>
  <description>docker</description>
</snippet>
